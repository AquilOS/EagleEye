cmake_minimum_required(VERSION 2.8)

project(EagleEye)
if(${CMAKE_BUILD_TYPE})
message(${CMAKE_BUILD_TYPE})
else()
endif(${CMAKE_BUILD_TYPE})
#set(CMAKE_DEBUG_POSTFIX "d")
set(BUILD_TYPE STATIC)

#SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/Bin CACHE PATH "Library output path")
#SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/Bin CACHE PATH "Executable output path")
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release")
SET(CMAKE_VERBOSE_MAKEFILE "true")


IF(WIN32)
    add_definitions(-DWIN32)
    add_definitions(-D_WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /FC /Od")
    if(${CMAKE_BUILD_TYPE} MATCHES DEBUG)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O0 -j12 -Wall -g")
    else()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2 -j12")
    endif()
ELSE(WIN32)
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++11 -Wl,--no-as-needed -fPIC -g -O0")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++11 -O2 -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -Wl,--no-as-needed -fPIC")
    #IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    #    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -fno-builtin")
    #    SET(CMAKE_CC_FLAGS "${CMAKE_CC_FLAGS} -O0 -fno-builtin")
    #    SET(CUDA_NVCC_FLAGS -O0 --compiler-options -fpermissive -arch sm_30 --maxrregcount 64 --ptxas-options=-v)
    #else()
    #    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -fno-builtin")
    #    SET(CMAKE_CC_FLAGS "${CMAKE_CC_FLAGS} -O2 -fno-builtin")
    #    SET(CUDA_NVCC_FLAGS -O2 --compiler-options -fpermissive -arch sm_30 --maxrregcount 64 --ptxas-options=-v)
    #ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")
ENDIF(WIN32)


add_subdirectory(EagleLib)
add_subdirectory(EagleEye)
add_subdirectory(Plugins)
add_subdirectory(samples)
add_subdirectory(tests)
