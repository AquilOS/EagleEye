cmake_minimum_required(VERSION 2.8)

project(EagleEye)
SET(BIN_DIRS "" CACHE STRING "" FORCE)


# This macro is used for linking libs to a target, but also adding the correct directories to the RCC config
MACRO(RCC_LINK_LIB TARGET)
	SET(PREFIX "")
	
    FOREACH(lib ${ARGN})
		SET(SKIP "0")
		IF(${lib} STREQUAL "optimized")
            SET(PREFIX "optimized;")
            SET(SKIP "1")
		ENDIF(${lib} STREQUAL "optimized")
		IF(${lib} STREQUAL "debug")
            SET(PREFIX "debug;")
            SET(SKIP "1")
		ENDIF(${lib} STREQUAL "debug")

		IF(${SKIP} STREQUAL "0")
			IF(EXISTS ${lib})
				TARGET_LINK_LIBRARIES(${TARGET} ${lib})
				GET_FILENAME_COMPONENT(DIR ${lib} DIRECTORY)
				SET(LINK_DIRS_DEBUG "${LINK_DIRS_DEBUG};${DIR}")
				SET(LINK_DIRS_RELEASE "${LINK_DIRS_RELEASE};${DIR}")
			ELSE(EXISTS ${lib})
                IF(TARGET ${lib})
                    GET_TARGET_PROPERTY(rel ${lib} IMPORTED_IMPLIB_RELEASE)
                    GET_TARGET_PROPERTY(deb ${lib} IMPORTED_IMPLIB_DEBUG)
                    IF(NOT rel)
                        SET(rel ${deb})
                    endif(NOT rel)
                    IF(NOT deb)
                        SET(deb ${rel})
                    ENDIF(NOT deb)
                    GET_FILENAME_COMPONENT(rel_ ${rel} DIRECTORY)
                    GET_FILENAME_COMPONENT(deb_ ${deb} DIRECTORY)
                    SET(LINK_DIRS_DEBUG "${LINK_DIRS_DEBUG};${deb_}")
                    SET(LINK_DIRS_RELEASE "${LINK_DIRS_RELEASE};${rel_}")
                ENDIF(TARGET ${lib})
			ENDIF(EXISTS ${lib})
            
			TARGET_LINK_LIBRARIES(${TARGET} ${PREFIX}${lib})
			MESSAGE("Linking ${PREFIX}${lib} to ${TARGET}")
		ENDIF(${SKIP} STREQUAL "0")
	ENDFOREACH(lib)
	LIST(REMOVE_DUPLICATES LINK_DIRS_DEBUG)
	LIST(REMOVE_DUPLICATES LINK_DIRS_RELEASE)
ENDMACRO(RCC_LINK_LIB TARGET)




set(BUILD_TYPE STATIC)
CMAKE_POLICY(SET CMP0020 NEW)
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake")
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release")
SET(CMAKE_VERBOSE_MAKEFILE "true")
SET(CMAKE_DEBUG_POSTFIX "d")
STRING(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
INCLUDE(cotire)
IF(WIN32)
  set(Boost_USE_STATIC_LIBS        OFF)
  set(Boost_USE_MULTITHREADED      ON)
  set(Boost_USE_STATIC_RUNTIME     OFF)
  ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ELSE(WIN32)
  set(Boost_USE_STATIC_LIBS        OFF)
  set(Boost_USE_MULTITHREADED      ON)
  set(Boost_USE_STATIC_RUNTIME     OFF)
  #ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ENDIF(WIN32)





IF(WIN32)
  add_definitions(-DWIN32)
  add_definitions(-D_WIN32)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	
  SET(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo")
  SET(CMAKE_CXX_FLAGS "/EHsc /FC /Zo /d2Zi+ /Zi /MP /Zm512" CACHE STRING "" FORCE)
  SET(CMAKE_CXX_FLAGS_DEBUG "/MDd /Od" CACHE STRING "" FORCE)
  SET(CMAKE_CXX_FLAGS_RELEASE "/MD /Zi /O2 /Ob1 /D NDEBUG" CACHE STRING "" FORCE)
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MD /O2" CACHE STRING "" FORCE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0501)
ELSE(WIN32)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wno-reorder -Wno-sign-compare -Wl,--no-as-needed -O0")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -g")
  SET(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin/Plugins" CACHE PATH "Library output path" FORCE)
  SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Executable output path" FORCE)
ENDIF(WIN32)

SET(EagleLib_JETSON FALSE CACHE BOOL "True if building for jetson platform")
add_subdirectory(EagleLib)

SET(LINK_DIRS_RELEASE ${EagleLib_LIB_DIRS_RELEASE})
SET(LINK_DIRS_DEBUG ${EagleLib_LIB_DIRS_DEBUG})

SET(INCLUDE_DIRS ${EagleLib_INCLUDE_DIRECTORIES})
SET(LINK_LIBS ${EagleLib_LIBRARIES})
SET(DEFS ${EagleLib_DEFS};-DBOOST_ALL_DYN_LINK)

LINK_DIRECTORIES(${LINK_DIRS_DEBUG})
LINK_DIRECTORIES(${LINK_DIRS_RELEASE})
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

add_subdirectory(Plugins)
add_subdirectory(samples)
add_subdirectory(tests)
add_subdirectory(EagleEye)